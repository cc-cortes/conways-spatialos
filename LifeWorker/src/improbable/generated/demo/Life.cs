// Generated by SpatialOS codegen. DO NOT EDIT!
// source: Life in demo.schema.

namespace Demo
{

public static class Life_Extensions
{
  public static Life.Data Get(this global::Improbable.Worker.IComponentData<Life> data)
  {
    return (Life.Data) data;
  }

  public static Life.Update Get(this global::Improbable.Worker.IComponentUpdate<Life> update)
  {
    return (Life.Update) update;
  }
}

public partial class Life : global::Improbable.Worker.IComponentMetaclass
{
  public const uint ComponentId = 111;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the Life component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<Life>, global::Improbable.Collections.IDeepCopyable<Data>
  {
    public global::Demo.LifeData Value;

    public Data(global::Demo.LifeData value)
    {
      Value = value;
    }

    public Data(
        bool curIsAlive,
        ulong curSequenceId,
        bool prevIsAlive,
        ulong prevSequenceId)
    {
      Value = new global::Demo.LifeData(
          curIsAlive,
          curSequenceId,
          prevIsAlive,
          prevSequenceId);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<Life> ToUpdate()
    {
      var update = new Update();
      update.SetCurIsAlive(Value.curIsAlive);
      update.SetCurSequenceId(Value.curSequenceId);
      update.SetPrevIsAlive(Value.prevIsAlive);
      update.SetPrevSequenceId(Value.prevSequenceId);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the Life component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<Life>, global::Improbable.Collections.IDeepCopyable<Update>
  {
    /// <summary>
    /// Field cur_is_alive = 1.
    /// </summary>
    public global::Improbable.Collections.Option<bool> curIsAlive;
    public Update SetCurIsAlive(bool _value)
    {
      curIsAlive.Set(_value);
      return this;
    }

    /// <summary>
    /// Field cur_sequence_id = 2.
    /// </summary>
    public global::Improbable.Collections.Option<ulong> curSequenceId;
    public Update SetCurSequenceId(ulong _value)
    {
      curSequenceId.Set(_value);
      return this;
    }

    /// <summary>
    /// Field prev_is_alive = 3.
    /// </summary>
    public global::Improbable.Collections.Option<bool> prevIsAlive;
    public Update SetPrevIsAlive(bool _value)
    {
      prevIsAlive.Set(_value);
      return this;
    }

    /// <summary>
    /// Field prev_sequence_id = 4.
    /// </summary>
    public global::Improbable.Collections.Option<ulong> prevSequenceId;
    public Update SetPrevSequenceId(ulong _value)
    {
      prevSequenceId.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (curIsAlive.HasValue)
      {
        bool field;
        field = curIsAlive.Value;
        _result.curIsAlive.Set(field);
      }
      if (curSequenceId.HasValue)
      {
        ulong field;
        field = curSequenceId.Value;
        _result.curSequenceId.Set(field);
      }
      if (prevIsAlive.HasValue)
      {
        bool field;
        field = prevIsAlive.Value;
        _result.prevIsAlive.Set(field);
      }
      if (prevSequenceId.HasValue)
      {
        ulong field;
        field = prevSequenceId.Value;
        _result.prevSequenceId.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<Life> ToInitialData()
    {
      return new Data(new global::Demo.LifeData(
          curIsAlive.Value,
          curSequenceId.Value,
          prevIsAlive.Value,
          prevSequenceId.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<Life> _data)
    {
      var _concrete = _data.Get();
      if (curIsAlive.HasValue)
      {
        _concrete.Value.curIsAlive = curIsAlive.Value;
      }
      if (curSequenceId.HasValue)
      {
        _concrete.Value.curSequenceId = curSequenceId.Value;
      }
      if (prevIsAlive.HasValue)
      {
        _concrete.Value.prevIsAlive = prevIsAlive.Value;
      }
      if (prevSequenceId.HasValue)
      {
        _concrete.Value.prevSequenceId = prevSequenceId.Value;
      }
    }
  }

  public partial class Commands
  {
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable Vtable {
    get {
      global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable vtable;
      vtable.ComponentId = ComponentId;
      vtable.Free = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientFree);
      vtable.Copy = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientCopy);
      vtable.Deserialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientDeserialize);
      vtable.Serialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientSerialize);
      return vtable;
    }
  }

  public void InvokeHandler(global::Improbable.Worker.Dynamic.Handler handler)
  {
    handler.Accept<Life>(this);
  }

  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize
      clientDeserialize = ClientDeserialize;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize
      clientSerialize = ClientSerialize;

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize))]
  private static unsafe global::System.Byte
  ClientDeserialize(global::System.UInt32 componentId,
                    global::System.Byte handleType,
                    global::Improbable.Worker.Internal.Pbio.Object* root,
                    global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle** handleOut)
  {
    *handleOut = null;
    try
    {
      *handleOut = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = new Update();
        var fieldsToClear = new global::System.Collections.Generic.HashSet<uint>();
        var fieldsToClearCount = global::Improbable.Worker.Internal.Pbio.GetUint32Count(root, /* fields to clear */ 1);
        for (uint i = 0; i < fieldsToClearCount; ++i)
        {
           fieldsToClear.Add(global::Improbable.Worker.Internal.Pbio.IndexUint32(root, /* fields to clear */ 1, i));
        }
        var stateObject = global::Improbable.Worker.Internal.Pbio.GetObject(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, /* entity_state */ 2), 111);
        if (global::Improbable.Worker.Internal.Pbio.GetBoolCount(stateObject, 1) > 0)
        {
          bool field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetBool(stateObject, 1) != 0;
          }
          data.curIsAlive.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetUint64Count(stateObject, 2) > 0)
        {
          ulong field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetUint64(stateObject, 2);
          }
          data.curSequenceId.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetBoolCount(stateObject, 3) > 0)
        {
          bool field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetBool(stateObject, 3) != 0;
          }
          data.prevIsAlive.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetUint64Count(stateObject, 4) > 0)
        {
          ulong field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetUint64(stateObject, 4);
          }
          data.prevSequenceId.Set(field);
        }
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot)
      {
        var data = new Data(global::Demo.LifeData_Internal.Read(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, 111)));
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        return 0;
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        return 0;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return 0;
    }
    return 1;
  }

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize))]
  private static unsafe void
  ClientSerialize(global::System.UInt32 componentId,
                  global::System.Byte handleType,
                  global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle* handle,
                  global::Improbable.Worker.Internal.Pbio.Object* root)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(*handle);
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = (Update) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        var stateObject = global::Improbable.Worker.Internal.Pbio.AddObject(
            global::Improbable.Worker.Internal.Pbio.AddObject(root, /* entity_state */ 2), 111);
        if (data.curIsAlive.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddBool(stateObject, 1, (byte) (data.curIsAlive.Value ? 1 : 0));
          }
        }
        if (data.curSequenceId.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddUint64(stateObject, 2, data.curSequenceId.Value);
          }
        }
        if (data.prevIsAlive.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddBool(stateObject, 3, (byte) (data.prevIsAlive.Value ? 1 : 0));
          }
        }
        if (data.prevSequenceId.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddUint64(stateObject, 4, data.prevSequenceId.Value);
          }
        }
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot) {
        var data = (Data) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        global::Demo.LifeData_Internal.Write(_pool, data.Value, global::Improbable.Worker.Internal.Pbio.AddObject(root, 111));
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        global::Improbable.Worker.Internal.Pbio.AddObject(root, 111);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        global::Improbable.Worker.Internal.Pbio.AddObject(root, 111);
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
  }
}

}
