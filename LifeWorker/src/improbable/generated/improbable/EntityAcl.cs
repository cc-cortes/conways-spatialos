// Generated by SpatialOS codegen. DO NOT EDIT!
// source: EntityAcl in improbable/standard_library.schema.

namespace Improbable
{

public static class EntityAcl_Extensions
{
  public static EntityAcl.Data Get(this global::Improbable.Worker.IComponentData<EntityAcl> data)
  {
    return (EntityAcl.Data) data;
  }

  public static EntityAcl.Update Get(this global::Improbable.Worker.IComponentUpdate<EntityAcl> update)
  {
    return (EntityAcl.Update) update;
  }
}

public partial class EntityAcl : global::Improbable.Worker.IComponentMetaclass
{
  public const uint ComponentId = 50;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the EntityAcl component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<EntityAcl>, global::Improbable.Collections.IDeepCopyable<Data>
  {
    public global::Improbable.EntityAclData Value;

    public Data(global::Improbable.EntityAclData value)
    {
      Value = value;
    }

    public Data(
        global::Improbable.WorkerRequirementSet readAcl,
        global::Improbable.Collections.Map<uint, global::Improbable.WorkerRequirementSet> componentWriteAcl)
    {
      Value = new global::Improbable.EntityAclData(
          readAcl,
          componentWriteAcl);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<EntityAcl> ToUpdate()
    {
      var update = new Update();
      update.SetReadAcl(Value.readAcl);
      update.SetComponentWriteAcl(Value.componentWriteAcl);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the EntityAcl component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<EntityAcl>, global::Improbable.Collections.IDeepCopyable<Update>
  {
    /// <summary>
    /// Field read_acl = 1.
    /// </summary>
    public global::Improbable.Collections.Option<global::Improbable.WorkerRequirementSet> readAcl;
    public Update SetReadAcl(global::Improbable.WorkerRequirementSet _value)
    {
      readAcl.Set(_value);
      return this;
    }

    /// <summary>
    /// Field component_write_acl = 2.
    /// </summary>
    public global::Improbable.Collections.Option<global::Improbable.Collections.Map<uint, global::Improbable.WorkerRequirementSet>> componentWriteAcl;
    public Update SetComponentWriteAcl(global::Improbable.Collections.Map<uint, global::Improbable.WorkerRequirementSet> _value)
    {
      if (_value == null)
      {
        throw new System.ArgumentNullException(null, "Attempt to send update with null value.");
      }
      componentWriteAcl.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (readAcl.HasValue)
      {
        global::Improbable.WorkerRequirementSet field;
        field = readAcl.Value.DeepCopy();
        _result.readAcl.Set(field);
      }
      if (componentWriteAcl.HasValue)
      {
        global::Improbable.Collections.Map<uint, global::Improbable.WorkerRequirementSet> field;
        field = componentWriteAcl.Value.DeepCopy();
        _result.componentWriteAcl.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<EntityAcl> ToInitialData()
    {
      return new Data(new global::Improbable.EntityAclData(
          readAcl.Value,
          componentWriteAcl.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<EntityAcl> _data)
    {
      var _concrete = _data.Get();
      if (readAcl.HasValue)
      {
        _concrete.Value.readAcl = readAcl.Value;
      }
      if (componentWriteAcl.HasValue)
      {
        _concrete.Value.componentWriteAcl = componentWriteAcl.Value;
      }
    }
  }

  public partial class Commands
  {
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.CInterop.ComponentVtable Vtable
  {
    get
    {
      unsafe
      {
        var vtable = new global::Improbable.Worker.CInterop.ComponentVtable
        {
          ComponentId = ComponentId,
          UserData = global::System.UIntPtr.Zero,
          CommandRequestFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          CommandRequestCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          CommandRequestDeserialize = CommandRequestDeserialize,
          CommandRequestSerialize = CommandRequestSerialize,
          CommandResponseFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          CommandResponseCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          CommandResponseDeserialize = CommandResponseDeserialize,
          CommandResponseSerialize = CommandResponseSerialize,
          ComponentDataFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          ComponentDataCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          ComponentDataDeserialize = ComponentDataDeserialize,
          ComponentDataSerialize = ComponentDataSerialize,
          ComponentUpdateFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          ComponentUpdateCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          ComponentUpdateDeserialize = ComponentUpdateDeserialize,
          ComponentUpdateSerialize = ComponentUpdateSerialize
        };
        return vtable;
      }
    }
  }

  public void InvokeHandler(global::Improbable.Worker.Dynamic.Handler handler)
  {
    handler.Accept<EntityAcl>(this);
  }

  private static unsafe bool
  ComponentUpdateDeserialize(global::System.UInt32 componentId,
                             global::System.UIntPtr userData,
                             global::Improbable.Worker.CInterop.SchemaComponentUpdate source,
                             out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new Update();
      var fieldsToClear = new global::System.Collections.Generic.HashSet<uint>();
      var fieldsToClearCount = source.GetClearedFieldCount();
      for (uint i = 0; i < fieldsToClearCount; ++i)
      {
         fieldsToClear.Add(source.IndexClearedField(i));
      }
      var fields = source.GetFields();
      if (fields.GetObjectCount(1) > 0)
      {
        global::Improbable.WorkerRequirementSet field;
        {
          field = global::Improbable.WorkerRequirementSet_Internal.Read(fields.GetObject(1));
        }
        data.readAcl.Set(field);
      }
      if (fields.GetObjectCount(2) > 0 || fieldsToClear.Contains(2))
      {
        global::Improbable.Collections.Map<uint, global::Improbable.WorkerRequirementSet> field;
        {
          var _count = fields.GetObjectCount(2);
          field = new global::Improbable.Collections.Map<uint, global::Improbable.WorkerRequirementSet>((int) _count);
          for (uint _i = 0; _i < _count; ++_i)
          {
            var _pair = fields.IndexObject(2, _i);
            field.Add(_pair.GetUint32(1), global::Improbable.WorkerRequirementSet_Internal.Read(_pair.GetObject(2)));
          }
        }
        data.componentWriteAcl.Set(field);
      }
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
    return true;
  }

  private static unsafe bool
  ComponentDataDeserialize(global::System.UInt32 componentId,
                           global::System.UIntPtr userData,
                           global::Improbable.Worker.CInterop.SchemaComponentData source,
                           out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new Data(global::Improbable.EntityAclData_Internal.Read(source.GetFields()));
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
    return true;
  }

  private static unsafe bool
  CommandRequestDeserialize(global::System.UInt32 componentId,
                            global::System.UIntPtr userData,
                            global::Improbable.Worker.CInterop.SchemaCommandRequest source,
                            out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new global::Improbable.Worker.Internal.GenericCommandObject();
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
      return false;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
  }

  private static unsafe bool
  CommandResponseDeserialize(global::System.UInt32 componentId,
                             global::System.UIntPtr userData,
                             global::Improbable.Worker.CInterop.SchemaCommandResponse source,
                             out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new global::Improbable.Worker.Internal.GenericCommandObject();
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
      return false;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaComponentUpdate?
  ComponentUpdateSerialize(global::System.UInt32 componentId,
                           global::System.UIntPtr userData,
                           global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
      var data = (Update) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(handle);
      var updateObject = new global::Improbable.Worker.CInterop.SchemaComponentUpdate(50);
      var fieldsObject = updateObject.GetFields();
      if (data.readAcl.HasValue)
      {
        {
          global::Improbable.WorkerRequirementSet_Internal.Write(_pool, data.readAcl.Value, fieldsObject.AddObject(1));
        }
      }
      if (data.componentWriteAcl.HasValue)
      {
        if (data.componentWriteAcl.Value.Count == 0)
        {
          updateObject.AddClearedField(2);
        }
        if (data.componentWriteAcl.Value != null)
        {
          for (var _node = data.componentWriteAcl.Value.First; _node != null; _node = _node.Next)
          {
            var _pair = fieldsObject.AddObject(2);
            {
              _pair.AddUint32(1, _node.Value.Key);
            }
            {
              global::Improbable.WorkerRequirementSet_Internal.Write(_pool, _node.Value.Value, _pair.AddObject(2));
            }
          }
        }
      }
      return updateObject;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return null;
    }
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaComponentData?
  ComponentDataSerialize(global::System.UInt32 componentId,
                         global::System.UIntPtr userData,
                         global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
      var data = (Data) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(handle);
      var dataObject = new global::Improbable.Worker.CInterop.SchemaComponentData(50);
      global::Improbable.EntityAclData_Internal.Write(_pool, data.Value, dataObject.GetFields());
      return dataObject;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return null;
    }
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaCommandRequest?
  CommandRequestSerialize(global::System.UInt32 componentId,
                          global::System.UIntPtr userData,
                          global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);

    }
    return null;
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaCommandResponse?
  CommandResponseSerialize(global::System.UInt32 componentId,
                           global::System.UIntPtr userData,
                           global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);

    }
    return null;
  }

}

}
