// Generated by SpatialOS codegen. DO NOT EDIT!
// source: Worker in improbable/restricted/system_components.schema.

namespace Improbable.Restricted
{

public static class Worker_Extensions
{
  public static Worker.Data Get(this global::Improbable.Worker.IComponentData<Worker> data)
  {
    return (Worker.Data) data;
  }

  public static Worker.Update Get(this global::Improbable.Worker.IComponentUpdate<Worker> update)
  {
    return (Worker.Update) update;
  }

  public static Worker.Commands.Disconnect.Request Get(this global::Improbable.Worker.ICommandRequest<Worker.Commands.Disconnect> request)
  {
    return (Worker.Commands.Disconnect.Request) request;
  }

  public static Worker.Commands.Disconnect.Response Get(this global::Improbable.Worker.ICommandResponse<Worker.Commands.Disconnect> response)
  {
    return (Worker.Commands.Disconnect.Response) response;
  }
}

public partial class Worker : global::Improbable.Worker.IComponentMetaclass
{
  public const uint ComponentId = 60;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the Worker component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<Worker>, global::Improbable.Collections.IDeepCopyable<Data>
  {
    public global::Improbable.Restricted.WorkerData Value;

    public Data(global::Improbable.Restricted.WorkerData value)
    {
      Value = value;
    }

    public Data(
        string workerId,
        string workerType,
        global::Improbable.Restricted.Connection connection)
    {
      Value = new global::Improbable.Restricted.WorkerData(
          workerId,
          workerType,
          connection);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<Worker> ToUpdate()
    {
      var update = new Update();
      update.SetWorkerId(Value.workerId);
      update.SetWorkerType(Value.workerType);
      update.SetConnection(Value.connection);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the Worker component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<Worker>, global::Improbable.Collections.IDeepCopyable<Update>
  {
    /// <summary>
    /// Field worker_id = 1.
    /// </summary>
    public global::Improbable.Collections.Option<string> workerId;
    public Update SetWorkerId(string _value)
    {
      workerId.Set(_value);
      return this;
    }

    /// <summary>
    /// Field worker_type = 2.
    /// </summary>
    public global::Improbable.Collections.Option<string> workerType;
    public Update SetWorkerType(string _value)
    {
      workerType.Set(_value);
      return this;
    }

    /// <summary>
    /// Field connection = 3.
    /// </summary>
    public global::Improbable.Collections.Option<global::Improbable.Restricted.Connection> connection;
    public Update SetConnection(global::Improbable.Restricted.Connection _value)
    {
      connection.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (workerId.HasValue)
      {
        string field;
        field = workerId.Value;
        _result.workerId.Set(field);
      }
      if (workerType.HasValue)
      {
        string field;
        field = workerType.Value;
        _result.workerType.Set(field);
      }
      if (connection.HasValue)
      {
        global::Improbable.Restricted.Connection field;
        field = connection.Value.DeepCopy();
        _result.connection.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<Worker> ToInitialData()
    {
      return new Data(new global::Improbable.Restricted.WorkerData(
          workerId.Value,
          workerType.Value,
          connection.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<Worker> _data)
    {
      var _concrete = _data.Get();
      if (workerId.HasValue)
      {
        _concrete.Value.workerId = workerId.Value;
      }
      if (workerType.HasValue)
      {
        _concrete.Value.workerType = workerType.Value;
      }
      if (connection.HasValue)
      {
        _concrete.Value.connection = connection.Value;
      }
    }
  }

  public partial class Commands
  {
    /// <summary>
    /// Command disconnect.
    /// </summary>
    public partial class Disconnect : global::Improbable.Worker.ICommandMetaclass
    {
      public uint ComponentId { get { return 60; } }
      public uint CommandId { get { return 1; } }

      public class Request : global::Improbable.Worker.ICommandRequest<Disconnect>, global::Improbable.Collections.IDeepCopyable<Request>
      {
        public global::Improbable.Restricted.DisconnectRequest Value;

        public Request(global::Improbable.Restricted.DisconnectRequest value)
        {
          Value = value;
        }

        public Request()
        {
          Value = new global::Improbable.Restricted.DisconnectRequest();
        }

        public Request DeepCopy()
        {
          return new Request(Value.DeepCopy());
        }

        public global::Improbable.Worker.Internal.GenericCommandObject ToGenericObject()
        {
          return new global::Improbable.Worker.Internal.GenericCommandObject(1, this);
        }
      }

      public class Response : global::Improbable.Worker.ICommandResponse<Disconnect>, global::Improbable.Collections.IDeepCopyable<Response>
      {
        public global::Improbable.Restricted.DisconnectResponse Value;

        public Response(global::Improbable.Restricted.DisconnectResponse value)
        {
          Value = value;
        }

        public Response()
        {
          Value = new global::Improbable.Restricted.DisconnectResponse();
        }

        public Response DeepCopy()
        {
          return new Response(Value.DeepCopy());
        }

        public global::Improbable.Worker.Internal.GenericCommandObject ToGenericObject()
        {
          return new global::Improbable.Worker.Internal.GenericCommandObject(1, this);
        }
      }
    }
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.CInterop.ComponentVtable Vtable
  {
    get
    {
      unsafe
      {
        var vtable = new global::Improbable.Worker.CInterop.ComponentVtable
        {
          ComponentId = ComponentId,
          UserData = global::System.UIntPtr.Zero,
          CommandRequestFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          CommandRequestCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          CommandRequestDeserialize = CommandRequestDeserialize,
          CommandRequestSerialize = CommandRequestSerialize,
          CommandResponseFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          CommandResponseCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          CommandResponseDeserialize = CommandResponseDeserialize,
          CommandResponseSerialize = CommandResponseSerialize,
          ComponentDataFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          ComponentDataCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          ComponentDataDeserialize = ComponentDataDeserialize,
          ComponentDataSerialize = ComponentDataSerialize,
          ComponentUpdateFree = global::Improbable.Worker.Internal.ClientHandles.HandleFree,
          ComponentUpdateCopy = global::Improbable.Worker.Internal.ClientHandles.HandleCopy,
          ComponentUpdateDeserialize = ComponentUpdateDeserialize,
          ComponentUpdateSerialize = ComponentUpdateSerialize
        };
        return vtable;
      }
    }
  }

  public void InvokeHandler(global::Improbable.Worker.Dynamic.Handler handler)
  {
    handler.Accept<Worker>(this);
  }

  private static unsafe bool
  ComponentUpdateDeserialize(global::System.UInt32 componentId,
                             global::System.UIntPtr userData,
                             global::Improbable.Worker.CInterop.SchemaComponentUpdate source,
                             out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new Update();
      var fieldsToClear = new global::System.Collections.Generic.HashSet<uint>();
      var fieldsToClearCount = source.GetClearedFieldCount();
      for (uint i = 0; i < fieldsToClearCount; ++i)
      {
         fieldsToClear.Add(source.IndexClearedField(i));
      }
      var fields = source.GetFields();
      if (fields.GetStringCount(1) > 0)
      {
        string field;
        {
          field = fields.GetString(1);
        }
        data.workerId.Set(field);
      }
      if (fields.GetStringCount(2) > 0)
      {
        string field;
        {
          field = fields.GetString(2);
        }
        data.workerType.Set(field);
      }
      if (fields.GetObjectCount(3) > 0)
      {
        global::Improbable.Restricted.Connection field;
        {
          field = global::Improbable.Restricted.Connection_Internal.Read(fields.GetObject(3));
        }
        data.connection.Set(field);
      }
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
    return true;
  }

  private static unsafe bool
  ComponentDataDeserialize(global::System.UInt32 componentId,
                           global::System.UIntPtr userData,
                           global::Improbable.Worker.CInterop.SchemaComponentData source,
                           out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new Data(global::Improbable.Restricted.WorkerData_Internal.Read(source.GetFields()));
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
    return true;
  }

  private static unsafe bool
  CommandRequestDeserialize(global::System.UInt32 componentId,
                            global::System.UIntPtr userData,
                            global::Improbable.Worker.CInterop.SchemaCommandRequest source,
                            out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new global::Improbable.Worker.Internal.GenericCommandObject();
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
      if (source.GetCommandIndex() == 1)
      {
        data.CommandId = 1;
        data.CommandObject = new Commands.Disconnect.Request(global::Improbable.Restricted.DisconnectRequest_Internal.Read(source.GetObject()));
        return true;
      }
      return false;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
  }

  private static unsafe bool
  CommandResponseDeserialize(global::System.UInt32 componentId,
                             global::System.UIntPtr userData,
                             global::Improbable.Worker.CInterop.SchemaCommandResponse source,
                             out global::System.UIntPtr handleOut)
  {
    handleOut = global::System.UIntPtr.Zero;
    try
    {
      var data = new global::Improbable.Worker.Internal.GenericCommandObject();
      var handle = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      *handle = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      handleOut = (global::System.UIntPtr) handle;
      if (source.GetCommandIndex() == 1)
      {
        data.CommandId = 1;
        data.CommandObject = new Commands.Disconnect.Response(global::Improbable.Restricted.DisconnectResponse_Internal.Read(source.GetObject()));
        return true;
      }
      return false;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaComponentUpdate?
  ComponentUpdateSerialize(global::System.UInt32 componentId,
                           global::System.UIntPtr userData,
                           global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
      var data = (Update) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(handle);
      var updateObject = new global::Improbable.Worker.CInterop.SchemaComponentUpdate(60);
      var fieldsObject = updateObject.GetFields();
      if (data.workerId.HasValue)
      {
        {
          fieldsObject.AddString(1, data.workerId.Value);
        }
      }
      if (data.workerType.HasValue)
      {
        {
          fieldsObject.AddString(2, data.workerType.Value);
        }
      }
      if (data.connection.HasValue)
      {
        {
          global::Improbable.Restricted.Connection_Internal.Write(_pool, data.connection.Value, fieldsObject.AddObject(3));
        }
      }
      return updateObject;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return null;
    }
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaComponentData?
  ComponentDataSerialize(global::System.UInt32 componentId,
                         global::System.UIntPtr userData,
                         global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
      var data = (Data) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(handle);
      var dataObject = new global::Improbable.Worker.CInterop.SchemaComponentData(60);
      global::Improbable.Restricted.WorkerData_Internal.Write(_pool, data.Value, dataObject.GetFields());
      return dataObject;
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return null;
    }
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaCommandRequest?
  CommandRequestSerialize(global::System.UInt32 componentId,
                          global::System.UIntPtr userData,
                          global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
      var data = (global::Improbable.Worker.Internal.GenericCommandObject)
          global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(handle);
      if (data.CommandId == 1)
      {
        var command = new global::Improbable.Worker.CInterop.SchemaCommandRequest(60, 1);
        var requestObject = (Commands.Disconnect.Request) data.CommandObject;
        global::Improbable.Restricted.DisconnectRequest_Internal.Write(_pool, requestObject.Value, command.GetObject());
        return command;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);

    }
    return null;
  }

  private static unsafe global::Improbable.Worker.CInterop.SchemaCommandResponse?
  CommandResponseSerialize(global::System.UInt32 componentId,
                           global::System.UIntPtr userData,
                           global::System.UIntPtr handle)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(handle);
      var data = (global::Improbable.Worker.Internal.GenericCommandObject)
          global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(handle);
      if (data.CommandId == 1)
      {
        var command = new global::Improbable.Worker.CInterop.SchemaCommandResponse(60, 1);
        var responseObject = (Commands.Disconnect.Response) data.CommandObject;
        global::Improbable.Restricted.DisconnectResponse_Internal.Write(_pool, responseObject.Value, command.GetObject());
        return command;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);

    }
    return null;
  }

}

}
